SEISFLOWS3 DEVEL VERSION EXAMPLE README FOR MAUI
STARTED: 27/08/2021
LAST UPDATED: 04/10/2021
Bryant Chow

NOTES:
* This is a readme explaining how to use the command line interface (CLI) of 
the SeisFlows3 (SF3) development version on the NEsI cluster Maui. 

* This version is significantly different from the original SeisFlows approach. 
The CLI is a completely new feature which automates most of the setup required
for SeisFlows. The CLI is modelled after the way Conda has set up their CLI, 
so hopefully feels familiar to those who use Conda.

* The information presented in this document is subject to change but should 
provide a broad overview on how to approach using SeisFlows3 to perform 
inversion tasks.

################################################################################

STEP 1: Environment setup

################################################################################
(1) SeisFlows needs to be run in a Conda environment. This must be done on the
maui ancillary node. To get there you need to SSH from maui using:

    $ ssh -X w-mauivlab01.maui.nesi.org.nz

(2) We will use my pre-built conda environment to run SeisFlows3. At some point
I will write an instruction page for creating the required conda env.

    $ source activate /nesi/project/gns03247/PyPackages/conda_envs/seisflows

OPTIONAL: You can also create your own conda environment using the text file 
provided which lists all the packages in my environment
    
    $ conda create --name seisflows sf3_conda_env.txt

(3) You should now be able to access the CLI by typing 'seisflows' in the terminal
which will list out the available commands in the Seisflows package

    [ancil] chowbr@w-mauivlab01 [~] $ seisflows

usage: seisflows [-h] [-w [WORKDIR]] [-p [PARAMETER_FILE]]
                 [--path_file [PATH_FILE]]
                 {setup,modules,configure,init,submit,resume,restart,clean,par,check,convert,reset,inspect,debug,edit}
                 ...

================================================================================

                     SeisFlows: Waveform Inversion Package

================================================================================

optional arguments:
  -h, --help            show this help message and exit
  -w [WORKDIR], --workdir [WORKDIR]
                        The SeisFlows working directory, default: cwd
  -p [PARAMETER_FILE], --parameter_file [PARAMETER_FILE]
                        Parameters file, default: 'parameters.yaml'
  --path_file [PATH_FILE]
                        Legacy path file, default: 'paths.py'

command:
  Available SeisFlows arguments and their intended usages

    setup               Setup working directory from scratch
    modules             Print available module names
    configure           Fill parameter file with defaults
    init                Initiate working environment
    submit              Submit initial workflow to system
    resume              Re-submit previous workflow to system
    restart             Remove current environment and submit new workflow
    clean               Remove active working environment
    par                 View and edit parameter file
    check               Check state of an active environment
    convert             Convert model file format
    reset               Reset underlying machinery
    inspect             View inheritenace and ownership
    debug               Start interactive debug environment
    edit                Open source code file in text editor

'seisflows [command] -h' for more detailed descriptions of each command.


################################################################################

STEP 2: Directory setup

################################################################################
(1) We can use the CLI to create a new SF3 working directory.

   $ cd /scale_wlg_nobackup/filesets/nobackup/gns03247/bchow/seisflows/examples/
   $ seisflows setup

(2) A file named 'parameters.yaml' has been created. This is an ASCII par file
that controls everything within SF3 and will be your main point of control over
how SF3 runs inversions, submits jobs, and generally interacts with the cluster

(3) If you open 'parameters.yaml' you will see a few modules which define each
of the main components of SF3. To view the available module choices defined
by SF3 we can run the modules command

    $ seisflows modules

(4) Because we're working on Maui and interested in performing an inversion 
(or just only the first part of an inversion), we need to change some of the 
default module choices in the 'parameters.yaml' file. Using a text editor, 
set the module choices to:

WORKFLOW: inversion
SOLVER: specfem3d
SYSTEM: maui
OPTIMIZE: LBFGS
PREPROCESS: pyatoa
POSTPROCESS: base

(4) Now we can run the 'configure' command which will automatically fill in the
remainder of the parameter file based on the choices we've set for our modules

    $ seisflows configure

(5) Open up the 'parameters.yaml' file again and you will see that the configure
command has set up the entire SeisFlows3 parameter file with docstrings
explaining what each of the parameters does. 

Note: Parameters that need to be filled in by the user are denoted with
 '!!! REQUIRED PARAMETER !!!'
For a general user, these parameters will need to be filled in based on their 
specific cluster, problem, and intended outcome. 

(6) To save some time, I have pre filled a parameters.yaml file, you can see 
which values have been set to what by using vimdiff

    $ vimdiff parameters.yaml TUTORIAL/parameters_complete.yaml



Great, the main, critical component of SeisFlows3, the parameters.yaml file is 
now complete. There are two more components that we require to run SeisFlows3,
the DATA/ directory, and the MODEL/ directory. The following tutorials will 
cover these.
    

